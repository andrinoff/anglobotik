import telegram
from telegram import Update
from telegram.ext import CallbackContext
import os
from telegram.ext._handlers.conversationhandler import ConversationHandler
from src.ai.ai import check_essay, check_letter
from telegram import constants

# Stages
START, TEACHER_OR_AI, TEACHER, AI, EGE_OR_OGE, LETTER_OR_ESSAY = range(6)

# Stages = range(9)


async def start(update: Update, context: CallbackContext):
    # keyboard = [
    #     [telegram.InlineKeyboardButton(f'Teacher [{os.getenv("PRICE")}]', callback_data='TEACHER')],
    #     [telegram.InlineKeyboardButton('AI', callback_data='AI')]
    # ]
    keyboard = [
        [telegram.InlineKeyboardButton('–ï–ì–≠', callback_data='EGE')],
        [telegram.InlineKeyboardButton('–û–ì–≠', callback_data='OGE')],
        ]
    reply_markup = telegram.InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω–≥–ª–æ–±–æ—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ—é –ø–∏—Å—å–º–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤. –í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Ç—ã —Å–¥–∞—ë—à—å: –û–ì–≠ –∏–ª–∏ –ï–ì–≠....:", reply_markup=reply_markup)
    return EGE_OR_OGE


async def EgeOrOge (update: Update, context: CallbackContext): 
    query = update.callback_query
    await query.answer()
    if query.data == "EGE":
        print("chose ege")
        context.user_data["type_exam"] = "EGE"
        keyboard = [
        [telegram.InlineKeyboardButton(f'–≠—Å—Å–µ', callback_data='ESSAY')],
        [telegram.InlineKeyboardButton('–õ–∏—á–Ω–æ–µ –ø–∏—Å—å–º–æ', callback_data='LETTER')],
        [telegram.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='BACK')]
        ]
        reply_markup = telegram.InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å: —ç—Å—Å–µ –∏–ª–∏ –ª–∏—á–Ω–æ–µ –ø–∏—Å—å–º–æ.", reply_markup=reply_markup)
        return LETTER_OR_ESSAY
    if query.data == "OGE":
        print(f"chose OGE")
        context.user_data["type_exam"] = "OGE"
        keyboard = [
        [telegram.InlineKeyboardButton('–õ–∏—á–Ω–æ–µ –ø–∏—Å—å–º–æ', callback_data='LETTER')],
        [telegram.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='BACK')]
        ]
        reply_markup = telegram.InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å", reply_markup=reply_markup)
        return LETTER_OR_ESSAY


async def letterOrEssay(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.data == 'LETTER':
        print("Letter button pressed")
        context.user_data["type"] = "LETTER"
    elif query.data == 'ESSAY':
        print("Essay button pressed")
        context.user_data["type"] = "ESSAY"
    elif query.data == "BACK": 
        print("Back button pressed")
        await query.edit_message_text(text="Have a good dat, to start over type /start ")
        return ConversationHandler.END
    else:
        print("Unexpected button pressed")
        await query.edit_message_text(text="Error: Unexpected button pressed. Please try again.")
        return ConversationHandler.END
    keyboard = [
        [telegram.InlineKeyboardButton(f'üîπ –£—á–∏—Ç–µ–ª—å ({os.getenv("PRICE")}, –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä)', callback_data='TEACHER')],
        [telegram.InlineKeyboardButton('üîπ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)', callback_data='AI')],
        [telegram.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='BACK')]
        ]
    reply_markup = telegram.InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –ö—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É? \n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    return TEACHER_OR_AI
    


async def TeacherOrAi(update: Update, context: CallbackContext):
    print("made it to TeacherOrAi")
    query = update.callback_query
    await query.answer()
    if query.data == 'TEACHER':
        await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print("Teacher button pressed")
        return TEACHER

    elif query.data == 'AI':
        await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        return AI
    elif query.data == 'BACK':
        print("Back button pressed")
        await query.edit_message_text(text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start ")
        return ConversationHandler.END
    else: 
        await query.edit_message_text(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    
async def ai(update: Update, context: CallbackContext):
    essay = update.message.text
    await update.message.reply_text(f'Great, AI is thinking...')
    if context.user_data['type'] == 'LETTER':
        feedback = check_letter(letter=essay, exam=context.user_data["type_exam"])
    elif context.user_data["type"] == "ESSAY":
        feedback = check_essay(essay=essay, exam=context.user_data["type_exam"])
    await update.message.reply_text(f'{feedback} \n\n\n /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞!')
    return ConversationHandler.END
    


async def teacher(update: Update, context: CallbackContext):
    work = update.message.text
    print(work)
    await context.bot.send_message(chat_id=os.getenv('TEACHER_CHAT_ID'), text=f"@{update.effective_chat.username} sent you a {context.user_data['type'].lower()} to check {context.user_data['type_exam']}: \n {work}")
    await update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ. –¢–≤–æ–π —Ç–µ–∫—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∏—Ç–µ–ª—é. –û–ø–ª–∞—Ç–∏ –ø–æ {os.getenv("PHONE_NUMBER")} –∏ –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ –≤ –ª–∏—á–∫—É! \n –ò—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ã: {os.getenv("NAME")}, @{os.getenv("USERNAME")}')
    return ConversationHandler.END